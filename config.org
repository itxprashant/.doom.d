#+title: My Doom Emacs Config
#+author: Prashant Tiwari
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://org-html-themes-itxp.pages.dev/src/worg/worg.css"/>

* Table of Contents :toc:noexport:
- [[#early-loadings][Early-loadings]]
- [[#doom-prelimary-docs][Doom prelimary docs]]
  - [[#configel][Config.el]]
- [[#completion][Completion]]
  - [[#company-mode][Company-mode]]
- [[#theming][Theming]]
- [[#org-mode][Org-mode]]
  - [[#org-modern][Org-modern]]
  - [[#org-latex-preview][Org-latex preview]]
  - [[#folding-unfolding-heading][Folding-Unfolding heading]]
  - [[#suppress-org-warnings][Suppress org-warnings]]
- [[#snippets][Snippets]]
- [[#editing][Editing]]
- [[#extra-config][Extra-config]]

* Early-loadings
#+begin_src emacs-lisp :tangle config.el
(require 'org)
(require 'org-latex-preview)
#+end_src


* Doom prelimary docs
** Config.el
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

#+begin_src emacs-lisp :tangle config.el
(setq user-full-name "Prashant Tiwari" 
         user-mail-address "prashantt492@gmail.com")
#+end_src

Doom exposes five (optional) variables for controlling fonts in Doom:

- =doom-font= -- the primary font to use
- =doom-variable-pitch-font= -- a non-monospace font (where applicable)
- =doom-big-font= -- used for `doom-big-font-mode'; use this for presentations or streaming.
- =doom-symbol-font= -- for symbols
- =doom-serif-font= -- for the `fixed-pitch-serif' face

If you or Emacs can't find your font, use 'M-x describe-font' to look them up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to refresh your font settings. If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!

There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the =load-theme= function. This is the default:

#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'modus-operandi)
(setq doom-theme 'ef-maris-dark)
(setq fancy-splash-image "~/.doom.d/banner.png")
(setq-default cursor-type 'bar)
#+end_src

This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp :tangle config.el
(setq display-line-numbers-type t)
#+end_src


If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp :tangle config.el
(setq org-directory "~/org/")
;; (add-hook 'org-agenda-finalize-hook #'org-modern-agenda)
#+end_src

Whenever you reconfigure a package, make sure to wrap your config in an
=after!= block, otherwise Doom's defaults may override your settings. E.g.

;;   (after! PACKAGE
;;     (setq x y))

The exceptions to this rule:
- Setting file/directory variables (like =org-directory=)
- Setting variables which explicitly tell you to set them before their package is loaded (see =C-h v VARIABLE= to look up their documentation).
- Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the `load-path', relative to this file. Emacs searches the `load-path' when you load packages with `require' or `use-package'.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces, etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.


* Completion
** Company-mode
#+begin_src emacs-lisp :tangle config.el
;; Enables company all the time
(add-hook 'after-init-hook 'global-company-mode)
(after! company
  (setq company-idle-delay 0.1
        company-minimum-prefix-length 2)
  (setq company-dabbrev-downcase 0)
  (setq company-show-quick-access nil)
  ;;(add-hook 'evil-normal-state-entry-hook #'company-abort)
  ) ;; make aborting less annoying
(add-hook! 'company-mode-hook 'company-quickhelp-mode)

;; company-dabbrev is rather distracting
(set-company-backend! 'org-mode
  '(:separate company-files company-capf company-yasnippet))

(setq company-files-chop-trailing-slash t)
#+end_src

* Theming

* Org-mode
** Org-modern
#+begin_src emacs-lisp :tangle config.el
;; Enable org-modern globally
;; (require 'org) must have been called
;; or use `(with-eval-after-load 'org (global-org-modern-mode))`
(global-org-modern-mode)

;; to enable org-modern mode locally
;;(add-hook 'org-mode-hook #'org-modern-mode)
#+end_src

** Org-latex preview
#+begin_src emacs-lisp :tangle config.el
(load "~/.doom.d/scripts/org-latex-preview-health")

;; (setq org-latex-preview-default-process 'dvipng)
;; (setq org-latex-preview-default-process 'imagemagick)

;; Fixed in the recent commit
;; (setq org-latex-preview-default-process 'dvisvgm)
;; (setf (plist-get (alist-get 'dvisvgm org-latex-preview-process-alist)
;;                  :image-converter)
;;       '("dvisvgm --page=1- --optimize --clipjoin --relative --no-fonts --bbox=preview -o %B-%%9p.svg %f"))
#+end_src

** Folding-Unfolding heading
#+begin_src emacs-lisp :tangle config.el
(define-key org-mode-map (kbd "C-c z f") '+org/close-all-folds)
(define-key org-mode-map (kbd "C-c z o") '+org/open-all-folds)

#+end_src


** Suppress org-warnings
#+begin_src emacs-lisp :tangle config.el
(add-to-list 'warning-suppress-types '(org))
#+end_src

* Snippets

* Editing

* Extra-config
Open nvim instance while writing, =kclip= is a workaround for an unknown jammer triggering on kill ring.

#+begin_src emacs-lisp :tangle config.el
;; (defun my-open-current-file-in-nvim ()
;;   (interactive)
;;   (save-buffer)
;;   (shell-command "~/.local/bin/kclip")
;;   (shell-command
;;   (format "urxvt -geometry 100x25 -e nvim +%d %s '+startinsert!'"
;;        (+ (if (bolp) 1 0) (count-lines 1 (point)))
;;        (shell-quote-argument buffer-file-name)))
;;   (evil-force-normal-state))
;; (global-set-key "\M-e" 'my-open-current-file-in-nvim)
#+end_src


;; Inkscape figures
#+begin_src emacs-lisp :tangle config.el
(load "~/.doom.d/scripts/ink")
(map! :leader
      :desc "ink-create-figure" "i i" 'ink-make-figure
      :mode 'org-mode :desc "org-download-clipboard" "i c" 'org-download-clipboard)
#+end_src



;; org-download
#+begin_src emacs-lisp :tangle config.el
(require 'org-download)
(defun my-org-download-method (link)
  (let ((filename
         (file-name-nondirectory
          (car (url-path-and-query
                (url-generic-parse-url link)))))
        (dirname (concat "img/" (file-name-sans-extension (buffer-name)))))
    (make-directory dirname :parents)
    (expand-file-name (concat (format-time-string "%Y%m%d%H%M%S-") filename) dirname)))
(setq org-download-method 'my-org-download-method)
;; (setq-default org-download-image-dir "./img/")
#+end_src


#+begin_src emacs-lisp :tangle config.el
;; alignment of tables in org latex or image preview
;; (add-hook 'org-mode-hook #'valign-mode)
;; (add-hook 'org-mode-hook 'org-cdlatex-mode)
#+end_src

Olivetti-mode
#+begin_src emacs-lisp :tangle config.el
(add-hook 'olivetti-mode-on-hook (lambda () (olivetti-set-width 66)))
(add-hook 'olivetti-mode-on-hook (lambda () (visual-line-mode 1)))
(add-hook 'org-mode-hook 'olivetti-mode)
#+end_src


#+begin_src emacs-lisp :tangle config.el
;; (setq org-image-align 'center)
;; (add-hook 'org-mode-hook (lambda () (display-line-numbers-mode -1)))
#+end_src


#+begin_src emacs-lisp :tangle config.el
(global-visual-line-mode 1)
#+end_src


Latex-snippets
#+begin_src emacs-lisp :tangle config.el
(load "~/.doom.d/snippets/aas/basic")
(load "~/.doom.d/snippets/aas/latex-aas")
(load "~/.doom.d/snippets/aas/chemistry-aas")
(add-hook 'LaTeX-mode-hook 'laas-mode)
(add-hook 'org-mode-hook 'laas-mode)
#+end_src



;; fonts and theming
#+begin_src emacs-lisp :tangle config.el
(setq doom-font (font-spec :family "Hack Nerd Font" :size 15)
      doom-variable-pitch-font (font-spec :family "Hack Nerd Font" :size 15)
      doom-big-font (font-spec :family "Hack Nerd Font" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src


#+begin_src emacs-lisp :tangle config.el
(set-default 'preview-default-document-pt 12)
(set-default 'preview-scale-function 1.5)
#+end_src


;; Use variable width font faces in current buffer
#+begin_src emacs-lisp :tangle config.el
 (defun my-buffer-face-mode-variable ()
   "Set font to a variable width (proportional) fonts in current buffer"
   (interactive)
   (setq buffer-face-mode-face '(:family "DejaVu Serif" :height 130))
   (set-face-attribute 'org-table nil  :inherit 'fixed-pitch) ;; For tables alignment
   (buffer-face-mode))

(add-hook! 'org-mode-hook 'my-buffer-face-mode-variable)
#+end_src



#+begin_src emacs-lisp :tangle config.el
(add-hook 'python-mode-hook 'anaconda-mode)
#+end_src



#+begin_src emacs-lisp :tangle config.el
;; neotree (moved to treemacs)
;; (after! neotree
;;   (setq neo-smart-open t
;;         neo-window-fixed-size nil))
;; (after! doom-themes
;;   (setq doom-neotree-enable-variable-pitch t))
;; (map! :leader
;;       :desc "Toggle neotree file viewer" "e" #'neotree-toggle
;;       :desc "Open directory in neotree"  "d n" #'neotree-dir)
#+end_src


#+begin_src emacs-lisp :tangle config.el
(add-hook! 'treemacs-mode-hook 'treemacs-follow-mode)
(setq treemacs-width 40)
#+end_src


#+begin_src emacs-lisp :tangle config.el
;;(add-hook! 'org-mode-hook 'evil-tex-mode)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(setq org-html-htmlize-output-type 'css)
#+end_src


#+begin_src emacs-lisp :tangle config.el
(vertico-reverse-mode 1)
#+end_src


#+begin_src emacs-lisp :tangle config.el
(defun save-and-revert-buffer ()
  "Saves and reverts the buffer"
  (interactive)
  (save-buffer)
  (revert-buffer))

(map! :leader
     :desc "Save and revert buffer" "b j" 'save-and-revert-buffer)
(map! :leader
      :desc "Browse other project" ">" 'doom/browse-in-other-project)
#+end_src


#+begin_src emacs-lisp :tangle config.el
(map! :mode 'ranger-mode :desc "New file" "; n" 'dired-create-empty-file)
#+end_src


#+begin_src emacs-lisp :tangle config.el
(defun org-latex-preview/dvipng ()
    "Sets dvipng as default latex process"
        (interactive)
        (setq org-latex-preview-process-default 'dvipng))

(defun org-latex-preview/dvisvgm ()
    "Sets dvipng as default latex process"
        (interactive)
        (setq org-latex-preview-process-default 'dvisvgm))

(defun org-latex-preview/imagemagick ()
    "Sets dvipng as default latex process"
        (interactive)
        (setq org-latex-preview-process-default 'imagemagick))
#+end_src


#+begin_src emacs-lisp :tangle config.el
;; latex preview options
(setq org-startup-with-inline-images t
      org-startup-with-latex-preview t
      +org-startup-with-animated-gifs t)
(add-hook 'org-mode-hook 'tooltip-mode)

(use-package! org-latex-preview
  :after org
  :hook ((org-mode . org-latex-preview-auto-mode))
  :config
  (pushnew! org-latex-preview--ignored-faces 'org-list-dt 'fixed-pitch)
  (setq org-latex-preview-numbered     t
        org-startup-with-latex-preview t
        org-latex-preview-width 1.0
        org-latex-preview-processing-indicator 'face
        ;;live previewing
        org-latex-preview-live-preview-fragments t
        org-latex-preview-auto-generate 'live
        org-latex-preview-debounce 1.0
        org-latex-preview-throttle 0.8
        org-latex-preview-live-preview-fragments t
        ;;previewing preamble
        org-latex-preview-preamble
        "\\documentclass{article}\n[DEFAULT-PACKAGES]\n[PACKAGES]
        \\usepackage[dvipsnames,svgnames]{xcolor}
        \\usepackage{amsmath,amssymb}"
))
#+end_src


#+begin_src emacs-lisp :tangle config.el
(load "~/.doom.d/scripts/ink.el")
(load "~/.doom.d/scripts/org-latex-preview")
#+end_src


#+begin_src emacs-lisp :tangle config.el
(map! :leader
      :desc "Toggle org latex preview auto mode" "t o" 'org-latex-preview-auto-mode
      :desc "Toggle lsp mode" "t L" 'lsp-mode
      :desc "Regenerate latex cache and preamble" "r L" 'regenerate-org-latex-cache-and-preamble
      :desc "Regenerate latex cache" "r l" 'regenerate-org-latex-cache-only)
#+end_src


#+begin_src emacs-lisp :tangle config.el
(use-package! yasnippet
  ;; :ensure t
  :hook ((LaTeX-mode . yas-minor-mode)
         (post-self-insert . my/yas-try-expanding-auto-snippets))
  :config
  (use-package warnings
    :config
    (cl-pushnew '(yasnippet backquote-change)
                warning-suppress-types
                :test 'equal))

  (setq yas-triggers-in-field t)

  ;; Function that tries to autoexpand YaSnippets
  ;; The double quoting is NOT a typo!
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand)))))
#+end_src




;; Disable ws-butler, responsible for omitting leading whitespaces or empty newlines
#+begin_src emacs-lisp :tangle config.el
(remove-hook 'doom-first-buffer-hook #'ws-butler-global-mode)
#+end_src


;; Tree-sitter sources
#+begin_src emacs-lisp :tangle config.el
(setq treesit-language-source-alist
   '((bash "https://github.com/tree-sitter/tree-sitter-bash")
     (cmake "https://github.com/uyha/tree-sitter-cmake")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (go "https://github.com/tree-sitter/tree-sitter-go")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (latex "https://github.com/latex-lsp/tree-sitter-latex")
     (make "https://github.com/alemuller/tree-sitter-make")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (toml "https://github.com/tree-sitter/tree-sitter-toml")
     (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(when init-file-debug
  (require 'benchmark-init)
  (add-hook 'doom-first-input-hook #'benchmark-init/deactivate))
#+end_src

#+begin_src emacs-lisp :tangle config.el
(setq treemacs-expand-added-projects nil
      treemacs-expand-after-init nil)
#+end_src


;; Org-appear
#+begin_src emacs-lisp :tangle config.el
(add-hook 'org-mode-hook 'org-appear-mode)
(setq org-hide-emphasis-markers t)
(setq org-appear-inside-latex nil
      org-appear-autoemphasis t
      org-appear-autolinks t
      org-appear-autosubmarkers t
      org-appear-autoentities t
      org-appear-autokeywords t)

(setq org-highlight-latex-and-related '(latex script entities))
#+end_src

;; Org-export
#+begin_src emacs-lisp :tangle config.el
(setq org-export-preserve-breaks nil)
#+end_src

;; GPTEL
#+begin_src emacs-lisp :tangle config.el
(setq gptel-default-mode #'org-mode)
(load "~/Documents/credentials/gptel-gemini-key")
(map! :leader
      :desc "GPTEL" "g g" 'gptel
      :desc "GPTEL send" "g s" 'gptel-send
      :desc "GPTEL menu" "g m" 'gptel-menu)

(define-key gptel-mode-map (kbd "C-c C-c") 'gptel-send)
#+end_src


;; Smartparens-yas fix
#+begin_src emacs-lisp :tangle config.el
;; (add-hook 'yas-before-expand-snippet-hook (lambda () (smartparens-mode -1)))
;; (add-hook 'yas-after-exit-snippet-hook (lambda () (smartparens-mode 1)))
#+end_src

;; Initialize org-mode with daemon
#+begin_src emacs-lisp :tangle config.el
(defun initialize-org-mode-with-daemon ()
  "Initializes org mode with daemon to reduce load time"
  (with-temp-buffer (org-mode)))

(add-hook 'emacs-startup-hook #'initialize-org-mode-with-daemon)
#+end_src

Elfeed-org setup
#+begin_src emacs-lisp :tangle config.el
(setq rmh-elfeed-org-files (list "~/.doom.d/elfeed.org"))
#+end_src

Org-latex pdf-process
#+begin_src emacs-lisp :tangle config.el
(setq org-latex-pdf-process '("latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f"))
#+end_src

Custom-functions
#+begin_src emacs-lisp :tangle config.el

(defun itxp/kill-save-line ()
  "Kill-saves the current line"
  (interactive)
  (save-excursion
    (end-of-line) (push-mark-command (point) t) (beginning-of-line)
    (kill-ring-save (point) (mark))))

(defun itxp/yank-below-line ()
  "Yanks below line"
  (interactive)
  (save-excursion (end-of-line) (newline) (yank)))

(defun itxp/duplicate-line ()
  "Duplicates line"
  (interactive)
  (save-excursion (itxp/kill-save-line) (itxp/yank-below-line)))

(global-set-key (kbd "C-M-y") 'itxp/duplicate-line)

(map! :leader
      :desc "kill-save line" "y w" 'itxp/kill-save-line
      :desc "yank below line" "y y" 'itxp/yank-below-line
      :desc "duplicate line" "y d" 'itxp/duplicate-line)

#+end_src

;; Some Leader based keybindings (inspired from doom)
#+begin_src emacs-lisp :tangle config.el
(map! :leader
         :desc "Kill workspace" "TAB x" '+workspace/kill-session
      :desc "Kill buffer" "b k" 'kill-this-buffer
      :desc "Maximize buffer" "w m" 'doom/window-maximize-buffer
      :desc "Find file in current project" "." 'find-file)
#+end_src

Org-mode mappings
#+begin_src emacs-lisp :tangle config.el
(map! :after org
      :map org-mode-map
      :leader
      :desc "org-latex-preview" "x l" 'org-latex-preview
      :desc "org-image-preview" "x v" 'org-toggle-inline-images)
#+end_src

Git-gutter
#+begin_src emacs-lisp :tangle config.el
(setq git-gutter:update-interval 0.1)
#+end_src

Dictionary
#+begin_src emacs-lisp :tangle config.el
(setq dictionary-server "dict.org")
#+end_src

Scratch-buffer
#+begin_src emacs-lisp :tangle config.el
(setq initial-scratch-message nil)
#+end_src

;; yasnippet-keymap
#+begin_src emacs-lisp :tangle config.el
(load (concat doom-user-dir "config/yas-keymaps"))
#+end_src


Emacs-everywhere
#+begin_src emacs-lisp :tangle config.el
(map! :map emacs-everywhere-mode-map
      "C-c C-c" 'emacs-everywhere--finish-or-ctrl-c-ctrl-c)
#+end_src

Window-management
#+begin_src emacs-lisp :tangle config.el
(global-set-key (kbd "C-x o") 'ace-window)
;; Split window and focus
(global-set-key (kbd "C-x 2") (lambda () (interactive) (split-window-vertically) (other-window 1) ))
(global-set-key (kbd "C-x 3") (lambda () (interactive) (split-window-horizontally) (other-window 1) ))
(global-set-key (kbd "C-x w m") 'doom/window-maximize-buffer)
(global-set-key (kbd "C-x w u") 'winner-undo)
(global-set-key (kbd "C-x w U") 'winner-redo)
#+end_src

Avy
#+begin_src emacs-lisp :tangle config.el
(global-set-key (kbd "C-:") 'avy-goto-char-2)
(global-set-key (kbd "M-g f") 'avy-goto-line)
#+end_src


;; Add modes to load at startup
#+begin_src emacs-lisp :tangle config.el
(org-mode)
(emacs-lisp-mode) ;; Revert
#+end_src
